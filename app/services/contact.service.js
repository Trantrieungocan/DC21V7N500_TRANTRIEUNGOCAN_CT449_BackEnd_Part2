const { ObjectId } = require("mongodb");

class ContactService {
    constructor(client) {
        this.Contact = client.db().collection("contacts");
    }

    // Chu·∫©n h√≥a d·ªØ li·ªáu contact
    extractContactData(payload) {
        const contact = {
            name: payload.name,
            email: payload.email,
            address: payload.address,
            phone: payload.phone,
            favorite: payload.favorite === true, // ƒë·∫£m b·∫£o l√† true/false
        };

        // X√≥a field undefined
        Object.keys(contact).forEach(
            (key) => contact[key] === undefined && delete contact[key]
        );
        return contact;
    }

    // üü¢ T·∫°o contact m·ªõi
    async create(payload) {
        const contact = this.extractContactData(payload);
        const result = await this.Contact.findOneAndUpdate(
            contact,             // ƒëi·ªÅu ki·ªán l·ªçc
            { $set: contact },   // l∆∞u to√†n b·ªô d·ªØ li·ªáu
            { returnDocument: "after", upsert: true }
        );
        return result.value || result;
    }

    // L·∫•y t·∫•t c·∫£ theo filter
    async find(filter) {
        const cursor = await this.Contact.find(filter);
        return await cursor.toArray();
    }

    // T√¨m theo t√™n (regex)
    async findByName(name) {
        return await this.find({
            name: { $regex: new RegExp(name), $options: "i" },
        });
    }

    // T√¨m theo id
    async findById(id) {
        return await this.Contact.findOne({
            _id: ObjectId.isValid(id) ? new ObjectId(id) : null,
        });
    }

    // C·∫≠p nh·∫≠t
    async update(id, payload) {
        const filter = {
            _id: ObjectId.isValid(id) ? new ObjectId(id) : null,
        };
        const update = this.extractContactData(payload);
        const result = await this.Contact.findOneAndUpdate(
            filter,
            { $set: update },
            { returnDocument: "after" }
        );
        return result.value;
    }

    // X√≥a theo id
    async delete(id) {
        const result = await this.Contact.findOneAndDelete({
            _id: ObjectId.isValid(id) ? new ObjectId(id) : null,
        });
        return result.value;
    }

    // üü¢ L·∫•y danh s√°ch favorite
    async findAllFavorite() {
        return await this.find({ favorite: true });
    }


    async deleteAll() {
        const result = await this.Contact.deleteMany({});
        return result.deletedCount;
    }
}

module.exports = ContactService;
